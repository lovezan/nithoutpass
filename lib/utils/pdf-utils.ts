import { jsPDF } from "jspdf"
import "jspdf-autotable"

// Setup a PDF document with common header information
export function setupPdfDocument(title: string, subtitle: string, generatedBy: string) {
  const doc = new jsPDF()
  const currentDate = new Date().toLocaleDateString()

  // Add title and header information
  doc.setFontSize(18)
  doc.text(title, 14, 22)

  doc.setFontSize(12)
  doc.text(subtitle, 14, 30)
  doc.text(`Date: ${currentDate}`, 14, 36)
  doc.text(`Generated by: ${generatedBy}`, 14, 42)

  return { doc, currentDate }
}

// Add footer to PDF document
export function addPdfFooter(doc: jsPDF) {
  const pageCount = doc.internal.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(10)
    doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, {
      align: "center",
    })
  }
}

// Generate outpass PDF
export function generateOutpassPdf(outpass: any, studentName?: string) {
  try {
    // Create a new PDF document
    const doc = new jsPDF()

    // Add title and header
    doc.setFontSize(18)
    doc.text("HOSTEL OUTPASS", 105, 20, { align: "center" })

    // Add outpass type icon or text
    doc.setFontSize(14)
    let typeText = "Standard Outpass"

    switch (outpass.type) {
      case "Market":
        typeText = "Market Outpass"
        break
      case "Home":
        typeText = "Home Outpass"
        break
      case "Medical":
        typeText = "Medical Outpass"
        break
      case "Academic":
        typeText = "Academic Outpass"
        break
    }

    doc.text(typeText, 105, 30, { align: "center" })

    // Add barcode if available
    if (outpass.student?.rollNo) {
      try {
        // Draw a barcode-like pattern
        doc.setFillColor(0, 0, 0)
        doc.setDrawColor(0, 0, 0)
        doc.setLineWidth(0.5)

        // Draw a barcode-like pattern
        const startX = 65
        const startY = 40
        const width = 80
        const height = 40

        // Draw border around barcode area
        doc.rect(startX, startY, width, height, "S")

        // Draw barcode lines
        const lines = 20
        const lineWidth = width / (lines * 2)

        for (let i = 0; i < lines; i++) {
          const x = startX + i * lineWidth * 2
          const lineHeight = 20 + Math.floor(Math.random() * 15)
          doc.rect(x, startY + 5, lineWidth, lineHeight, "F")
        }

        // Add roll number below barcode
        doc.setFontSize(10)
        doc.text(outpass.student.rollNo, startX + width / 2, startY + height - 5, { align: "center" })
      } catch (imgError) {
        console.error("Error adding barcode to PDF:", imgError)
        // Continue without the barcode image
        doc.setFontSize(14)
        doc.text(`Roll Number: ${outpass.student?.rollNo || "N/A"}`, 105, 50, { align: "center" })
      }
    } else {
      // If no roll number, just add text
      doc.setFontSize(14)
      doc.text(`Roll Number: ${outpass.student?.rollNo || "N/A"}`, 105, 50, { align: "center" })
    }

    // Add outpass details
    doc.setFontSize(12)
    doc.text("OUTPASS DETAILS", 20, 90)

    // Add horizontal line
    doc.setLineWidth(0.5)
    doc.line(20, 95, 190, 95)

    // Student details
    doc.setFontSize(10)
    doc.text(`Outpass ID: ${outpass.id}`, 20, 105)
    doc.text(`Student Name: ${outpass.student?.name || studentName || "Unknown"}`, 20, 115)
    doc.text(`Roll Number: ${outpass.student?.rollNo || "Unknown"}`, 20, 125)
    doc.text(`Room Number: ${outpass.student?.roomNo || "Unknown"}`, 20, 135)
    doc.text(`Hostel: ${outpass.student?.hostel || "Unknown"}`, 20, 145)

    // Outpass details
    doc.text(`Type: ${outpass.type}`, 120, 105)
    doc.text(`Purpose: ${outpass.purpose}`, 120, 115)
    doc.text(`Place: ${outpass.place}`, 120, 125)
    doc.text(`Date: ${outpass.date}`, 120, 135)
    doc.text(`Return Time: ${outpass.returnTime}`, 120, 145)

    // Status and approval
    doc.text(`Status: ${outpass.status}`, 20, 160)
    doc.text(`Approved By: ${outpass.approvedBy ? `Admin #${outpass.approvedBy}` : "Pending"}`, 20, 170)
    doc.text(`Approved On: ${outpass.approvedAt ? new Date(outpass.approvedAt).toLocaleString() : "Pending"}`, 20, 180)

    // Add special instructions based on outpass type
    doc.setFontSize(9)
    doc.text("Instructions:", 20, 195)

    // Common instructions
    doc.text("1. This outpass must be presented at the gate for exit and entry.", 20, 205)
    doc.text("2. Students must return to the hostel before the specified return time.", 20, 215)

    // Type-specific instructions
    if (outpass.type === "Medical") {
      doc.text("3. Please bring medical documentation upon return.", 20, 225)
      doc.text("4. In case of emergency, contact the hostel warden immediately.", 20, 235)
    } else if (outpass.type === "Home") {
      doc.text("3. For extended stays, inform the hostel administration in advance.", 20, 225)
      doc.text("4. Parent confirmation may be required for home outpasses.", 20, 235)
    } else if (outpass.type === "Academic") {
      doc.text("3. Bring proof of academic activity upon return if requested.", 20, 225)
      doc.text("4. Academic outpasses are only valid for the specified academic purpose.", 20, 235)
    } else {
      doc.text("3. Violation of hostel rules may result in disciplinary action.", 20, 225)
    }

    // Add footer
    doc.setFontSize(8)
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 20, 245)
    doc.text("This is an electronically generated document and does not require signature.", 20, 250)

    return doc
  } catch (error) {
    console.error("Error generating PDF:", error)
    throw error
  }
}
